version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: findmycar-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: findmycar
      POSTGRES_USER: findmycar
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U findmycar"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: findmycar-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FastAPI Application (multiple instances for load balancing)
  app1:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: findmycar-app1
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://findmycar:${POSTGRES_PASSWORD}@postgres:5432/findmycar
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - PYTHONUNBUFFERED=1
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      # AUTO_DEV_API_KEY not needed for findmycar
      - EBAY_CLIENT_ID=${EBAY_CLIENT_ID}
      - EBAY_CLIENT_SECRET=${EBAY_CLIENT_SECRET}
      - SECRET_KEY=${SECRET_KEY}
      - ENVIRONMENT=production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  app2:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: findmycar-app2
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://findmycar:${POSTGRES_PASSWORD}@postgres:5432/findmycar
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - PYTHONUNBUFFERED=1
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      # AUTO_DEV_API_KEY not needed for findmycar
      - EBAY_CLIENT_ID=${EBAY_CLIENT_ID}
      - EBAY_CLIENT_SECRET=${EBAY_CLIENT_SECRET}
      - SECRET_KEY=${SECRET_KEY}
      - ENVIRONMENT=production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker for background tasks
  worker:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: findmycar-worker
    restart: unless-stopped
    command: celery -A tasks worker --loglevel=info --concurrency=4
    environment:
      - DATABASE_URL=postgresql://findmycar:${POSTGRES_PASSWORD}@postgres:5432/findmycar
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - PYTHONUNBUFFERED=1
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      # AUTO_DEV_API_KEY not needed for findmycar
      - EBAY_CLIENT_ID=${EBAY_CLIENT_ID}
      - EBAY_CLIENT_SECRET=${EBAY_CLIENT_SECRET}
      - SECRET_KEY=${SECRET_KEY}
      - ENVIRONMENT=production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs

  # Celery Beat for scheduled tasks
  beat:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: findmycar-beat
    restart: unless-stopped
    command: celery -A tasks beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://findmycar:${POSTGRES_PASSWORD}@postgres:5432/findmycar
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - PYTHONUNBUFFERED=1
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      # AUTO_DEV_API_KEY not needed for findmycar
      - EBAY_CLIENT_ID=${EBAY_CLIENT_ID}
      - EBAY_CLIENT_SECRET=${EBAY_CLIENT_SECRET}
      - SECRET_KEY=${SECRET_KEY}
      - ENVIRONMENT=production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: findmycar-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - app1
      - app2
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: findmycar-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: findmycar-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data: