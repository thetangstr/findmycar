name: Deploy to Firebase

on:
  push:
    branches:
      - main
      - production
  pull_request:
    branches:
      - main

env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '18'

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r findmycar/requirements.txt
        pip install pytest pytest-cov
    
    - name: Run tests
      run: |
        cd findmycar
        pytest test_production_ready.py -v
    
    - name: Security scan with Bandit
      run: |
        pip install bandit
        bandit -r findmycar/ -ll -i -x findmycar/test_*.py || true

  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Build application
      run: |
        cd findmycar
        # Create production build
        pip install -r requirements.txt
        
        # Collect static files
        mkdir -p build/static
        cp -r static/* build/static/
        cp -r templates build/
        
        # Create app.yaml for App Engine
        cat > app.yaml << EOF
        runtime: python39
        entrypoint: gunicorn -b :8080 -w 2 --timeout 120 flask_app_production:app
        
        instance_class: F2
        
        automatic_scaling:
          min_instances: 1
          max_instances: 10
          target_cpu_utilization: 0.7
        
        env_variables:
          ENVIRONMENT: "production"
          DATABASE_URL: "${{ secrets.DATABASE_URL }}"
          REDIS_URL: "${{ secrets.REDIS_URL }}"
          SECRET_KEY: "${{ secrets.SECRET_KEY }}"
          EBAY_CLIENT_ID: "${{ secrets.EBAY_CLIENT_ID }}"
          EBAY_CLIENT_SECRET: "${{ secrets.EBAY_CLIENT_SECRET }}"
          ENABLE_SLOW_SOURCES: "false"
        
        handlers:
        - url: /static
          static_dir: static
          secure: always
        
        - url: /.*
          script: auto
          secure: always
        EOF
    
    - name: Archive production artifacts
      uses: actions/upload-artifact@v3
      with:
        name: production-build
        path: findmycar/

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: production-build
        path: findmycar/
    
    - name: Setup Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
    
    - name: Deploy to staging
      run: |
        cd findmycar
        # Deploy to staging environment
        gcloud app deploy app.yaml \
          --project=${{ secrets.GCP_PROJECT_ID }} \
          --version=pr-${{ github.event.pull_request.number }} \
          --no-promote \
          --quiet

  deploy-production:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: production-build
        path: findmycar/
    
    - name: Setup Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
    
    - name: Deploy to production
      run: |
        cd findmycar
        # Deploy to production
        gcloud app deploy app.yaml \
          --project=${{ secrets.GCP_PROJECT_ID }} \
          --version=prod-$(date +%Y%m%d-%H%M%S) \
          --promote \
          --quiet
    
    - name: Verify deployment
      run: |
        # Wait for deployment to stabilize
        sleep 30
        
        # Check health endpoint
        HEALTH_CHECK=$(curl -s https://${{ secrets.GCP_PROJECT_ID }}.appspot.com/health)
        if [[ $HEALTH_CHECK == *"healthy"* ]]; then
          echo "Deployment successful!"
        else
          echo "Health check failed!"
          exit 1
        fi
    
    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        text: |
          Deployment to production ${{ job.status }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  deploy-firebase-hosting:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install Firebase CLI
      run: npm install -g firebase-tools
    
    - name: Create Firebase hosting files
      run: |
        cd findmycar
        
        # Create firebase.json
        cat > firebase.json << EOF
        {
          "hosting": {
            "public": "public",
            "ignore": [
              "firebase.json",
              "**/.*",
              "**/node_modules/**"
            ],
            "rewrites": [
              {
                "source": "/api/**",
                "function": "api"
              },
              {
                "source": "**",
                "destination": "/index.html"
              }
            ],
            "headers": [
              {
                "source": "**/*.@(jpg|jpeg|gif|png|svg|webp)",
                "headers": [
                  {
                    "key": "Cache-Control",
                    "value": "max-age=604800"
                  }
                ]
              },
              {
                "source": "**/*.@(js|css)",
                "headers": [
                  {
                    "key": "Cache-Control",
                    "value": "max-age=86400"
                  }
                ]
              }
            ]
          },
          "functions": {
            "source": "functions",
            "runtime": "python39"
          }
        }
        EOF
        
        # Create .firebaserc
        cat > .firebaserc << EOF
        {
          "projects": {
            "default": "${{ secrets.FIREBASE_PROJECT_ID }}"
          }
        }
        EOF
        
        # Create public directory
        mkdir -p public
        cp -r static/* public/
        cp templates/modern_landing.html public/index.html
    
    - name: Deploy to Firebase Hosting
      run: |
        cd findmycar
        firebase deploy --only hosting --token ${{ secrets.FIREBASE_TOKEN }}